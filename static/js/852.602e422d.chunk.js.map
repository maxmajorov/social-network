{"version":3,"file":"static/js/852.602e422d.chunk.js","mappings":"kOACA,EAAyB,2BAAzB,EAAiE,+B,SCQpDA,EAA4C,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,SACtDC,EAAe,YAD0D,EAATC,GAGpE,OACE,UAAC,KAAD,CAASC,GAAIF,EAAMG,UAAWC,EAA9B,WACE,gBACEC,IAAI,uBACJC,IAAI,cACJH,UAAWC,IAEZL,M,wCClBP,EAAgC,qCAAhC,EAAoF,oCAApF,EAAqL,+BC6CxKQ,GAAyBC,EAAAA,EAAAA,GAA2B,CAC/DC,KAAM,kBAD8BD,EA/BqC,SACzEE,GAEA,IAAMC,GAAWC,EAAAA,EAAAA,MAWjB,OACE,kBAAMT,UAAWC,EAAuBS,SAAUH,EAAMI,aAAxD,WACE,SAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,GACXC,KAAK,aACLf,UAAWC,EACXe,YAAY,0BACZC,WAhByB,SAC7BC,GAEAC,QAAQC,IAAIF,EAAMG,cAAcC,OACb,KAAnBJ,EAAMK,SACFf,GAASgB,EAAAA,EAAAA,IAAgBN,EAAMG,cAAcC,QAC7CH,QAAQC,IAAI,aAWZK,SAAU,CAACC,EAAAA,GAAUC,EAAAA,IACrBC,KAAM,GACNC,KAAM,KAER,mBAAQ7B,UAAWC,EAAnB,gCASO6B,EAA8B,WACzC,IAAMtB,GAAWC,EAAAA,EAAAA,MAOjB,OACE,+BACE,SAACL,EAAD,CAAwBM,SAPX,SAACqB,GAChBA,EAASC,WACLxB,GAASgB,EAAAA,EAAAA,IAAgBO,EAASC,aAClCb,QAAQC,IAAI,wBCvDpB,EAA0B,6BCOba,EAA8C,SAAC,GAGrD,IAFLC,EAEI,EAFJA,YAEI,EADJpC,GAEA,OAAO,gBAAKE,UAAWC,EAAhB,SAAkCiC,KCX3C,GAAgB,QAAU,yBAAyB,YAAc,6BAA6B,KAAO,uBC6CrG,EA/B4C,SAAC,GAA6B,EAA3BC,qBAA4B,IACnEC,GAAUC,EAAAA,EAAAA,IAAeC,EAAAA,IACzBC,GAAWF,EAAAA,EAAAA,IAAeG,EAAAA,KAEhCC,EAAAA,EAAAA,YAAU,WAER,OADAC,SAASC,MAAT,UACO,WAELD,SAASC,MAAT,qBAIJ,IAAMC,EAAkBR,EAAQS,KAAI,SAACC,GAAD,OAClC,SAACnD,EAAD,CAAyBC,SAAUkD,EAAG/B,KAAMjB,GAAIgD,EAAGC,KAAlCD,EAAGC,QAGhBC,EAAkBT,EAASM,KAAI,SAACC,GAAD,OACnC,SAACb,EAAD,CAA0BC,YAAaY,EAAGG,QAASnD,GAAIgD,EAAGC,KAAxCD,EAAGC,QAGvB,OACE,kBAAM/C,UAAWC,EAAAA,QAAjB,WACE,gBAAKD,UAAWC,EAAAA,YAAhB,SAAsC2C,KACtC,iBAAK5C,UAAWC,EAAAA,aAAhB,WACE,gBAAKD,UAAWC,EAAAA,KAAhB,SAA+B+C,KAC/B,SAAClB,EAAD,WCdR,EAlByB,WACvB,IAAMoB,GAAab,EAAAA,EAAAA,IAAec,EAAAA,IAC5B3C,GAAWC,EAAAA,EAAAA,MACb2C,GAAWC,EAAAA,EAAAA,OAEfZ,EAAAA,EAAAA,YAAU,WACR,IAAKS,EACH,OAAOE,EAAS,qBAEjB,CAACA,EAAUF,IAMd,OAAO,SAAC,EAAD,CAASf,qBAJqB,SAACH,GACpCxB,GAASgB,EAAAA,EAAAA,IAAgBQ","sources":["webpack://social-network/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://social-network/./src/components/Dialogs/MessageItem/CreateMessage/CreateMessage.module.css?d8c4","components/Dialogs/MessageItem/CreateMessage/CreateMessage.tsx","webpack://social-network/./src/components/Dialogs/MessageItem/MessageItem.module.css?481d","components/Dialogs/MessageItem/MesssageItem.tsx","webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__XHWdC\",\"userAvatar\":\"DialogItem_userAvatar__b+00w\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"./DialogItem.module.css\";\r\n\r\ntype DialogItemPropsType = {\r\n  userName: string;\r\n  id: string;\r\n};\r\n\r\nexport const DialogItem: React.FC<DialogItemPropsType> = ({ userName, id }) => {\r\n  let path: string = \"/dialogs/\" + id; //Путь можно вынести в переменную\r\n\r\n  return (\r\n    <NavLink to={path} className={classes.dialog}>\r\n      <img\r\n        src=\"../../img/avatar.jpg\"\r\n        alt=\"user-avatar\"\r\n        className={classes.userAvatar}\r\n      />\r\n      {userName}\r\n    </NavLink>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"createMessage\":\"CreateMessage_createMessage__-BzmT\",\"inputMessage\":\"CreateMessage_inputMessage__rAbrr\",\"errorMessage\":\"CreateMessage_errorMessage__b5FVt\",\"postBtn\":\"CreateMessage_postBtn__3zPNw\"};","import React, { KeyboardEvent } from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { AddNewMessageAC } from \"../../../../bll/reducers/dialogs-reducer\";\r\nimport { useAppDispatch } from \"../../../../bll/store\";\r\nimport { Textarea } from \"../../../common/FormControls/FormControls\";\r\nimport {\r\n  maxLength100,\r\n  required,\r\n} from \"../../../../utils/validators/validators\";\r\nimport classes from \"./CreateMessage.module.css\";\r\n\r\ntype FormMessageType = {\r\n  newMessage: string;\r\n};\r\n\r\nexport const CreateMessage: React.FC<InjectedFormProps<FormMessageType>> = (\r\n  props\r\n) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onKeyPressInputHandler = (\r\n    event: KeyboardEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    console.log(event.currentTarget.value);\r\n    event.charCode === 13\r\n      ? dispatch(AddNewMessageAC(event.currentTarget.value))\r\n      : console.log(\"notEnter\");\r\n  };\r\n\r\n  return (\r\n    <form className={classes.createMessage} onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        name=\"newMessage\"\r\n        className={classes.inputMessage}\r\n        placeholder=\"Write something here...\"\r\n        onKeyPress={onKeyPressInputHandler}\r\n        validate={[required, maxLength100]}\r\n        cols={50}\r\n        rows={2}\r\n      ></Field>\r\n      <button className={classes.postBtn}>Send message</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const CreateMessageReduxForm = reduxForm<FormMessageType>({\r\n  form: \"addMessageForm\",\r\n})(CreateMessage);\r\n\r\nexport const CreateMessageForm: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onSubmit = (formData: FormMessageType) => {\r\n    formData.newMessage\r\n      ? dispatch(AddNewMessageAC(formData.newMessage))\r\n      : console.log(\"Field is empty\");\r\n  };\r\n  return (\r\n    <>\r\n      <CreateMessageReduxForm onSubmit={onSubmit} />\r\n    </>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"MessageItem_message__3CUU8\"};","import React from \"react\";\r\nimport classes from \"./MessageItem.module.css\";\r\n\r\ntype MessageItemPropsType = {\r\n  id: string;\r\n  messageText: string;\r\n};\r\n\r\nexport const MessageItem: React.FC<MessageItemPropsType> = ({\r\n  messageText,\r\n  id,\r\n}) => {\r\n  return <div className={classes.message}>{messageText}</div>;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__tzAp9\",\"dialogsList\":\"Dialogs_dialogsList__7RyKq\",\"item\":\"Dialogs_item__APjWl\"};","import React, { useEffect } from \"react\";\r\nimport { useAppSelector } from \"../../bll/store\";\r\nimport { DialogItem } from \"./DialogItem/DialogItem\";\r\nimport { CreateMessageForm } from \"./MessageItem/CreateMessage/CreateMessage\";\r\nimport { MessageItem } from \"./MessageItem/MesssageItem\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport {\r\n  selectDialogs,\r\n  selectMessages,\r\n} from \"../../bll/reducers/dialogs-reducer\";\r\n\r\ntype DialogsPropsType = {\r\n  addNewMessageToStore: (newMessage: string) => void;\r\n};\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = ({ addNewMessageToStore }) => {\r\n  const dialogs = useAppSelector(selectDialogs);\r\n  const messages = useAppSelector(selectMessages);\r\n\r\n  useEffect(() => {\r\n    document.title = `Dialogs`;\r\n    return () => {\r\n      // cleanup\r\n      document.title = `Social Network`;\r\n    };\r\n  });\r\n\r\n  const dialogsElements = dialogs.map((el) => (\r\n    <DialogItem key={el._id} userName={el.name} id={el._id} />\r\n  ));\r\n\r\n  const messageElements = messages.map((el) => (\r\n    <MessageItem key={el._id} messageText={el.message} id={el._id} />\r\n  ));\r\n\r\n  return (\r\n    <main className={classes.dialogs}>\r\n      <div className={classes.dialogsList}>{dialogsElements}</div>\r\n      <div className={classes.messagesList}>\r\n        <div className={classes.item}>{messageElements}</div>\r\n        <CreateMessageForm />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { isLoggedInSelector } from \"../../bll/reducers/auth-reducer\";\r\nimport { AddNewMessageAC } from \"../../bll/reducers/dialogs-reducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../../bll/store\";\r\n\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nconst DialogsContainer = () => {\r\n  const isLoggedIn = useAppSelector(isLoggedInSelector);\r\n  const dispatch = useAppDispatch();\r\n  let navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      return navigate(\"/authentication\");\r\n    }\r\n  }, [navigate, isLoggedIn]);\r\n\r\n  const addNewMessageToStoreCallback = (newMessage: string) => {\r\n    dispatch(AddNewMessageAC(newMessage));\r\n  };\r\n\r\n  return <Dialogs addNewMessageToStore={addNewMessageToStoreCallback} />;\r\n};\r\n\r\nexport default DialogsContainer;\r\n"],"names":["DialogItem","userName","path","id","to","className","classes","src","alt","CreateMessageReduxForm","reduxForm","form","props","dispatch","useAppDispatch","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","onKeyPress","event","console","log","currentTarget","value","charCode","AddNewMessageAC","validate","required","maxLength100","cols","rows","CreateMessageForm","formData","newMessage","MessageItem","messageText","addNewMessageToStore","dialogs","useAppSelector","selectDialogs","messages","selectMessages","useEffect","document","title","dialogsElements","map","el","_id","messageElements","message","isLoggedIn","isLoggedInSelector","navigate","useNavigate"],"sourceRoot":""}